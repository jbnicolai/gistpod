#!/usr/bin/env node --harmony

/// <reference path='../../typings/tsd.d.ts' />
var $ = require('cli-components');
var chalk = require('chalk');
var cliff = require('cliff');
var when = require('when');
var CommandRouter = require('command-router');
var Gistpod = require('../lib/gistpod');
var r = new CommandRouter();
var args = [].concat(process.argv).slice(3);
Gistpod.load().then(function (gistpod) {
    r.on('notfound', function () {
        $.io.println(r.helpText());
        process.exit(1);
    });
    r.command('update', '(Over)writes the Podfile in the current directory with a newly-generated one based on Podfile.gistpod.', function () {
        var podfileDir = (args.length > 0) ? args[0] : '.';
        return gistpod.writePodfileFromTemplate(podfileDir).then(function () { return 'Podfile updated.'; });
    });
    r.command('pull', 'Pulls your latest gist information from GitHub into your local cache.', function () {
        return gistpod.updateGistCacheFromAPI().then(function () { return 'Cache updated.'; });
    });
    r.command('list', 'Lists the podspecs found in your GitHub gist account.', function () {
        var gists = gistpod.fetchAllPodspecInfo();
        return when.resolve(formatGistList(gists));
    });
    r.command('username :username', 'Sets the GitHub username of the gists account you want to source podspecs from.', function () {
        return gistpod.setGithubUsername(r.params.username).then(function () { return 'Username set.'; });
    });
    r.command('url :podName', 'Prints the url of the gist containing the specified podspec.', function () {
        return when.resolve(gistpod.fetchPodspecInfo(r.params.podName)).then(function (podspec) { return podspec.raw_url; });
    });
    r.parse(process.argv).then(function (text) { return $.io.print(text); }).catch(function (err) { return $.io.dieError(err); });
});
function formatGistList(gists) {
    var rows = [[chalk.underline.bold('Pod'), chalk.underline.bold('Podspec gist URL')],];
    for (var i in gists) {
        var gist = gists[i];
        var row = [chalk.blue(gist.name), gist.raw_url];
        rows.push(row);
    }
    return '\n' + cliff.stringifyRows(rows, ['cyan', 'green']);
}
